/*
 * Copyright © 2025 RTAkland
 * Author: RTAkland
 * Date: 2025/3/31
 */

package cn.rtast.rkmbed.gradle

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import java.io.File

abstract class GenerateResourcesTask : DefaultTask() {
    @TaskAction
    fun generate() {
        val resourcesDir = project.layout.projectDirectory.dir("src/commonMain/resources")
        val outputDir = project.layout.buildDirectory.dir("generated/kotlin").get().asFile
        val outputFile = File(outputDir, "_RKMbed_GeneratedResources_x_x_x_1_2.kt")
        if (!resourcesDir.asFile.exists()) return
        val settings = project.extensions.findByType(RKMbedProjectExtension::class.java)
        val files = resourcesDir.asFileTree.files
        val generatedCode = buildString {
            appendCode("// 此文件为自动生成, 请勿手动修改! | This file is auto-generated, please DO NOT edit it by hand!")
            appendLine()
            appendCode("// 由 RTAkland/RKMBed(GitHub) 自动生成 | Generated by RTAkland/RKMBed on GitHub")
            appendLine()
            appendCode("package ${settings?.packageName?.get() ?: "com.example.resources"}")
            appendLine()
            appendCode("""import cn.rtast.rkmbed.runtime.Resource""")
            appendLine()
            appendCode("private val GeneratedResource: Map<String, Resource> = mapOf<String, Resource>(")
            files.forEach {
                appendCode(
                    "\"${
                        it.path.split("src${File.separator}commonMain${File.separator}resources${File.separator}")
                            .last().replace(File.separator, "/")
                    }\" to Resource(${it.toUByteArrayOf()}),"
                )
            }
            appendCode(")")
            appendLine()
            appendCode(
                """public fun getResource(path: String): Resource {
    return requireNotNull(GeneratedResource[path]) { "资源 ${'$'}path 不存在! | Resource ${'$'}path is not exists!" }
}"""
            )
        }
        outputFile.parentFile.mkdirs()
        outputFile.writeText(generatedCode)
    }
}